
// SPDX-License-Identifier: MIT
pragma solidity ^0.8.19;

/**
 * @title Community-Owned Solar Energy Trading
 * @dev Smart contract for peer-to-peer solar energy trading in local communities
 */
contract Project {
    
    // State variables
    address public owner;
    uint256 public totalEnergyTraded;
    uint256 public energyPrice; // Price per kWh in wei
    
    // Structs
    struct EnergyProducer {
        address producerAddress;
        uint256 energyAvailable; // in kWh
        uint256 pricePerKWh;
        bool isActive;
        uint256 totalEnergyProduced;
    }
    
    struct EnergyConsumer {
        address consumerAddress;
        uint256 energyConsumed;
        uint256 totalSpent;
    }
    
    struct EnergyTransaction {
        address producer;
        address consumer;
        uint256 energyAmount;
        uint256 pricePerKWh;
        uint256 totalCost;
        uint256 timestamp;
    }
    
    // Mappings
    mapping(address => EnergyProducer) public producers;
    mapping(address => EnergyConsumer) public consumers;
    mapping(uint256 => EnergyTransaction) public transactions;
    
    // Arrays
    address[] public producerList;
    uint256 public transactionCount;
    
    // Events
    event ProducerRegistered(address indexed producer, uint256 pricePerKWh);
    event EnergyListed(address indexed producer, uint256 energyAmount, uint256 pricePerKWh);
    event EnergyPurchased(address indexed consumer, address indexed producer, uint256 energyAmount, uint256 totalCost);
    event EnergyPriceUpdated(address indexed producer, uint256 newPrice);
    
    // Modifiers
    modifier onlyOwner() {
        require(msg.sender == owner, "Only contract owner can call this function");
        _;
    }
    
    modifier onlyRegisteredProducer() {
        require(producers[msg.sender].isActive, "Only registered producers can call this function");
        _;
    }
    
    constructor() {
        owner = msg.sender;
        energyPrice = 1e15; // Default price: 0.001 ETH per kWh
    }
    
    /**
     * @dev Core Function 1: Register as an energy producer and list available energy
     * @param _energyAmount Amount of energy available in kWh
     * @param _pricePerKWh Price per kWh in wei
     */
    function registerProducerAndListEnergy(uint256 _energyAmount, uint256 _pricePerKWh) external {
        require(_energyAmount > 0, "Energy amount must be greater than 0");
        require(_pricePerKWh > 0, "Price must be greater than 0");
        
        // Register or update producer
        if (!producers[msg.sender].isActive) {
            producers[msg.sender] = EnergyProducer({
                producerAddress: msg.sender,
                energyAvailable: _energyAmount,
                pricePerKWh: _pricePerKWh,
                isActive: true,
                totalEnergyProduced: _energyAmount
            });
            producerList.push(msg.sender);
            emit ProducerRegistered(msg.sender, _pricePerKWh);
        } else {
            producers[msg.sender].energyAvailable += _energyAmount;
            producers[msg.sender].totalEnergyProduced += _energyAmount;
            producers[msg.sender].pricePerKWh = _pricePerKWh;
        }
        
        emit EnergyListed(msg.sender, _energyAmount, _pricePerKWh);
    }
    
    /**
     * @dev Core Function 2: Purchase energy from a specific producer
     * @param _producer Address of the energy producer
     * @param _energyAmount Amount of energy to purchase in kWh
     */
    function purchaseEnergy(address _producer, uint256 _energyAmount) external payable {
        require(_energyAmount > 0, "Energy amount must be greater than 0");
        require(producers[_producer].isActive, "Producer is not active");
        require(producers[_producer].energyAvailable >= _energyAmount, "Insufficient energy available");
        
        uint256 totalCost = _energyAmount * producers[_producer].pricePerKWh;
        require(msg.value >= totalCost, "Insufficient payment");
        
        // Update producer's available energy
        producers[_producer].energyAvailable -= _energyAmount;
        
        // Update consumer data
        consumers[msg.sender].consumerAddress = msg.sender;
        consumers[msg.sender].energyConsumed += _energyAmount;
        consumers[msg.sender].totalSpent += totalCost;
        
        // Record transaction
        transactions[transactionCount] = EnergyTransaction({
            producer: _producer,
            consumer: msg.sender,
            energyAmount: _energyAmount,
            pricePerKWh: producers[_producer].pricePerKWh,
            totalCost: totalCost,
            timestamp: block.timestamp
        });
        transactionCount++;
        
        // Update global stats
        totalEnergyTraded += _energyAmount;
        
        // Transfer payment to producer
        payable(_producer).transfer(totalCost);
        
        // Refund excess payment
        if (msg.value > totalCost) {
            payable(msg.sender).transfer(msg.value - totalCost);
        }
        
        emit EnergyPurchased(msg.sender, _producer, _energyAmount, totalCost);
    }
    
    /**
     * @dev Core Function 3: Update energy price for producers
     * @param _newPricePerKWh New price per kWh in wei
     */
    function updateEnergyPrice(uint256 _newPricePerKWh) external onlyRegisteredProducer {
        require(_newPricePerKWh > 0, "Price must be greater than 0");
        
        producers[msg.sender].pricePerKWh = _newPricePerKWh;
        
        emit EnergyPriceUpdated(msg.sender, _newPricePerKWh);
    }
    
    // View functions
    function getProducerCount() external view returns (uint256) {
        return producerList.length;
    }
    
    function getAllProducers() external view returns (address[] memory) {
        return producerList;
    }
    
    function getProducerDetails(address _producer) external view returns (
        uint256 energyAvailable,
        uint256 pricePerKWh,
        bool isActive,
        uint256 totalEnergyProduced
    ) {
        EnergyProducer memory producer = producers[_producer];
        return (
            producer.energyAvailable,
            producer.pricePerKWh,
            producer.isActive,
            producer.totalEnergyProduced
        );
    }
    
    function getConsumerDetails(address _consumer) external view returns (
        uint256 energyConsumed,
        uint256 totalSpent
    ) {
        EnergyConsumer memory consumer = consumers[_consumer];
        return (consumer.energyConsumed, consumer.totalSpent);
    }
    
    function getTransactionDetails(uint256 _transactionId) external view returns (
        address producer,
        address consumer,
        uint256 energyAmount,
        uint256 pricePerKWh,
        uint256 totalCost,
        uint256 timestamp
    ) {
        require(_transactionId < transactionCount, "Transaction does not exist");
        EnergyTransaction memory txn = transactions[_transactionId];
        return (
            txn.producer,
            txn.consumer,
            txn.energyAmount,
            txn.pricePerKWh,
            txn.totalCost,
            txn.timestamp
        );
    }
    
    // Emergency functions
    function deactivateProducer() external onlyRegisteredProducer {
        producers[msg.sender].isActive = false;
    }
    
    function emergencyWithdraw() external onlyOwner {
        payable(owner).transfer(address(this).balance);
    }
}
